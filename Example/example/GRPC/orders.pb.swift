// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: orders.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct OrdersOrderChangingReadStatusReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersOrderChangingReadStatusResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersCreateReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventTickets: [OrdersCreateReq.EventTicket] {
    get {return _storage._eventTickets}
    set {_uniqueStorage()._eventTickets = newValue}
  }

  var requestID: String {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  var eventID: Int64 {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  var selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._selectTicketTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._selectTicketTime = newValue}
  }
  /// Returns true if `selectTicketTime` has been explicitly set.
  var hasSelectTicketTime: Bool {return _storage._selectTicketTime != nil}
  /// Clears the value of `selectTicketTime`. Subsequent reads from it will return its default value.
  mutating func clearSelectTicketTime() {_storage._selectTicketTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EventTicket {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventTicketID: Int64 = 0

    var qty: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersCreateResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  var expireTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expireTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expireTime = newValue}
  }
  /// Returns true if `expireTime` has been explicitly set.
  var hasExpireTime: Bool {return _storage._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
  mutating func clearExpireTime() {_storage._expireTime = nil}

  var serverCurrentTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._serverCurrentTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._serverCurrentTime = newValue}
  }
  /// Returns true if `serverCurrentTime` has been explicitly set.
  var hasServerCurrentTime: Bool {return _storage._serverCurrentTime != nil}
  /// Clears the value of `serverCurrentTime`. Subsequent reads from it will return its default value.
  mutating func clearServerCurrentTime() {_storage._serverCurrentTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersCheckCreateStatusReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersCheckCreateStatusResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tickets: [OrdersCheckCreateStatusResp.Ticket] = []

  var convenienceFee: Float = 0

  var freeConvenienceFee: Bool = false

  var priceDiscount: Float = 0

  var actualPay: Float = 0

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Ticket {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var title: String = String()

    var price: Float = 0

    var quantity: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct OrdersCheckoutURLReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var requestID: String = String()

  var paymentType: String = String()

  var latitude: String = String()

  var longitude: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersCheckoutURLResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkoutURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersCancelReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersAdditionalInfoReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var purchasers: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._purchasers ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._purchasers = newValue}
  }
  /// Returns true if `purchasers` has been explicitly set.
  var hasPurchasers: Bool {return _storage._purchasers != nil}
  /// Clears the value of `purchasers`. Subsequent reads from it will return its default value.
  mutating func clearPurchasers() {_storage._purchasers = nil}

  var orderID: Int64 {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  var contactName: String {
    get {return _storage._contactName}
    set {_uniqueStorage()._contactName = newValue}
  }

  var contactEmail: String {
    get {return _storage._contactEmail}
    set {_uniqueStorage()._contactEmail = newValue}
  }

  var contactPhone: String {
    get {return _storage._contactPhone}
    set {_uniqueStorage()._contactPhone = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PurchaserNoKtp {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PurchaserOneKtp {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    var birthDate: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._birthDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._birthDate = newValue}
    }
    /// Returns true if `birthDate` has been explicitly set.
    var hasBirthDate: Bool {return _storage._birthDate != nil}
    /// Clears the value of `birthDate`. Subsequent reads from it will return its default value.
    mutating func clearBirthDate() {_storage._birthDate = nil}

    var ktp: String {
      get {return _storage._ktp}
      set {_uniqueStorage()._ktp = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct PurchaserOneToOneKtp {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var purchasers: [OrdersAdditionalInfoReq.PurchaserOneToOneKtp.Purchaser] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Purchaser {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var eventTicketID: Int64 {
        get {return _storage._eventTicketID}
        set {_uniqueStorage()._eventTicketID = newValue}
      }

      var name: String {
        get {return _storage._name}
        set {_uniqueStorage()._name = newValue}
      }

      var birthDate: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _storage._birthDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_uniqueStorage()._birthDate = newValue}
      }
      /// Returns true if `birthDate` has been explicitly set.
      var hasBirthDate: Bool {return _storage._birthDate != nil}
      /// Clears the value of `birthDate`. Subsequent reads from it will return its default value.
      mutating func clearBirthDate() {_storage._birthDate = nil}

      var ktp: String {
        get {return _storage._ktp}
        set {_uniqueStorage()._ktp = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersUpcomingOrderReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersTicketStatusResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: [OrdersTicketStatusResp.Status] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Status {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var status: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct OrdersTransactionOrderReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageNumber: Int32 = 0

  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersTicketDetailReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersTicketCheckingReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersTicketCode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticketClass: String {
    get {return _storage._ticketClass}
    set {_uniqueStorage()._ticketClass = newValue}
  }

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var price: Float {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var codeType: Int32 {
    get {return _storage._codeType}
    set {_uniqueStorage()._codeType = newValue}
  }

  var qrCode: [OrdersTicketCode.QRCode] {
    get {return _storage._qrCode}
    set {_uniqueStorage()._qrCode = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct QRCode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: String = String()

    var ktp: String = String()

    var name: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersUpcomingOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var coverPicture: String {
    get {return _storage._coverPicture}
    set {_uniqueStorage()._coverPicture = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var ticketDetails: [OrdersTicketCode] {
    get {return _storage._ticketDetails}
    set {_uniqueStorage()._ticketDetails = newValue}
  }

  var timeZone: Int32 {
    get {return _storage._timeZone}
    set {_uniqueStorage()._timeZone = newValue}
  }

  var actualPayment: Float {
    get {return _storage._actualPayment}
    set {_uniqueStorage()._actualPayment = newValue}
  }

  var codeInstructionsTitle: String {
    get {return _storage._codeInstructionsTitle}
    set {_uniqueStorage()._codeInstructionsTitle = newValue}
  }

  var codeInstructionsBody: String {
    get {return _storage._codeInstructionsBody}
    set {_uniqueStorage()._codeInstructionsBody = newValue}
  }

  var selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._selectTicketTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._selectTicketTime = newValue}
  }
  /// Returns true if `selectTicketTime` has been explicitly set.
  var hasSelectTicketTime: Bool {return _storage._selectTicketTime != nil}
  /// Clears the value of `selectTicketTime`. Subsequent reads from it will return its default value.
  mutating func clearSelectTicketTime() {_storage._selectTicketTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersUpcomingOrderResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readStatus: Bool = false

  var upcomingOrders: [OrdersUpcomingOrder] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersTransactionOrderResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orders: [OrdersTransactionOrderResp.Order] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Order {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var title: String {
      get {return _storage._title}
      set {_uniqueStorage()._title = newValue}
    }

    var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._startTime = newValue}
    }
    /// Returns true if `startTime` has been explicitly set.
    var hasStartTime: Bool {return _storage._startTime != nil}
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    mutating func clearStartTime() {_storage._startTime = nil}

    var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._endTime = newValue}
    }
    /// Returns true if `endTime` has been explicitly set.
    var hasEndTime: Bool {return _storage._endTime != nil}
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    mutating func clearEndTime() {_storage._endTime = nil}

    var ticketNumber: Int32 {
      get {return _storage._ticketNumber}
      set {_uniqueStorage()._ticketNumber = newValue}
    }

    var address: String {
      get {return _storage._address}
      set {_uniqueStorage()._address = newValue}
    }

    var status: Int32 {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    var coverPicture: String {
      get {return _storage._coverPicture}
      set {_uniqueStorage()._coverPicture = newValue}
    }

    var timeZone: Int32 {
      get {return _storage._timeZone}
      set {_uniqueStorage()._timeZone = newValue}
    }

    var selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._selectTicketTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._selectTicketTime = newValue}
    }
    /// Returns true if `selectTicketTime` has been explicitly set.
    var hasSelectTicketTime: Bool {return _storage._selectTicketTime != nil}
    /// Clears the value of `selectTicketTime`. Subsequent reads from it will return its default value.
    mutating func clearSelectTicketTime() {_storage._selectTicketTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct OrdersTicketDetailResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var coverPicture: String {
    get {return _storage._coverPicture}
    set {_uniqueStorage()._coverPicture = newValue}
  }

  var convenienceFee: Float {
    get {return _storage._convenienceFee}
    set {_uniqueStorage()._convenienceFee = newValue}
  }

  var actualConvenienceFee: Float {
    get {return _storage._actualConvenienceFee}
    set {_uniqueStorage()._actualConvenienceFee = newValue}
  }

  var ticketDetails: [OrdersTicketDetailResp.TicketCodeWithPrice] {
    get {return _storage._ticketDetails}
    set {_uniqueStorage()._ticketDetails = newValue}
  }

  var actualPayment: Float {
    get {return _storage._actualPayment}
    set {_uniqueStorage()._actualPayment = newValue}
  }

  var discount: Float {
    get {return _storage._discount}
    set {_uniqueStorage()._discount = newValue}
  }

  var danaVoucher: Float {
    get {return _storage._danaVoucher}
    set {_uniqueStorage()._danaVoucher = newValue}
  }

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var timeZone: Int32 {
    get {return _storage._timeZone}
    set {_uniqueStorage()._timeZone = newValue}
  }

  var codeType: Int32 {
    get {return _storage._codeType}
    set {_uniqueStorage()._codeType = newValue}
  }

  var updatedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedTime = newValue}
  }
  /// Returns true if `updatedTime` has been explicitly set.
  var hasUpdatedTime: Bool {return _storage._updatedTime != nil}
  /// Clears the value of `updatedTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedTime() {_storage._updatedTime = nil}

  var codeInstructionsBody: String {
    get {return _storage._codeInstructionsBody}
    set {_uniqueStorage()._codeInstructionsBody = newValue}
  }

  var codeInstructionsTitle: String {
    get {return _storage._codeInstructionsTitle}
    set {_uniqueStorage()._codeInstructionsTitle = newValue}
  }

  var selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._selectTicketTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._selectTicketTime = newValue}
  }
  /// Returns true if `selectTicketTime` has been explicitly set.
  var hasSelectTicketTime: Bool {return _storage._selectTicketTime != nil}
  /// Clears the value of `selectTicketTime`. Subsequent reads from it will return its default value.
  mutating func clearSelectTicketTime() {_storage._selectTicketTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TicketCodeWithPrice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ticketClass: String {
      get {return _storage._ticketClass}
      set {_uniqueStorage()._ticketClass = newValue}
    }

    var id: Int64 {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._startTime = newValue}
    }
    /// Returns true if `startTime` has been explicitly set.
    var hasStartTime: Bool {return _storage._startTime != nil}
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    mutating func clearStartTime() {_storage._startTime = nil}

    var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._endTime = newValue}
    }
    /// Returns true if `endTime` has been explicitly set.
    var hasEndTime: Bool {return _storage._endTime != nil}
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    mutating func clearEndTime() {_storage._endTime = nil}

    var price: Float {
      get {return _storage._price}
      set {_uniqueStorage()._price = newValue}
    }

    var qrCode: [OrdersTicketDetailResp.TicketCodeWithPrice.QRCode] {
      get {return _storage._qrCode}
      set {_uniqueStorage()._qrCode = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct QRCode {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var code: String = String()

      var ktp: String = String()

      var name: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersManualRefundReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersManualCancelReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersQueryTransactionReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var pageNumber: Int32 {
    get {return _storage._pageNumber}
    set {_uniqueStorage()._pageNumber = newValue}
  }

  var pageCount: Int32 {
    get {return _storage._pageCount}
    set {_uniqueStorage()._pageCount = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct OrdersQueryTransactionResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var details: [OrdersQueryTransactionResp.Detail] = []

  var total: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Detail {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var orderID: Int64 {
      get {return _storage._orderID}
      set {_uniqueStorage()._orderID = newValue}
    }

    var status: Int32 {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._createAt = newValue}
    }
    /// Returns true if `createAt` has been explicitly set.
    var hasCreateAt: Bool {return _storage._createAt != nil}
    /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
    mutating func clearCreateAt() {_storage._createAt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct OrdersChangeOrderEmailReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var email: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OrdersResendOrderEmailReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tix.service"

extension OrdersOrderChangingReadStatusReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderChangingReadStatusReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersOrderChangingReadStatusReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersOrderChangingReadStatusResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderChangingReadStatusResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersOrderChangingReadStatusResp) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCreateReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_tickets"),
    2: .standard(proto: "request_id"),
    3: .standard(proto: "event_id"),
    4: .standard(proto: "select_ticket_time"),
  ]

  fileprivate class _StorageClass {
    var _eventTickets: [OrdersCreateReq.EventTicket] = []
    var _requestID: String = String()
    var _eventID: Int64 = 0
    var _selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventTickets = source._eventTickets
      _requestID = source._requestID
      _eventID = source._eventID
      _selectTicketTime = source._selectTicketTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._eventTickets)
        case 2: try decoder.decodeSingularStringField(value: &_storage._requestID)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._eventID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._selectTicketTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._eventTickets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._eventTickets, fieldNumber: 1)
      }
      if !_storage._requestID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestID, fieldNumber: 2)
      }
      if _storage._eventID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._eventID, fieldNumber: 3)
      }
      if let v = _storage._selectTicketTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCreateReq) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventTickets != other_storage._eventTickets {return false}
        if _storage._requestID != other_storage._requestID {return false}
        if _storage._eventID != other_storage._eventID {return false}
        if _storage._selectTicketTime != other_storage._selectTicketTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCreateReq.EventTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersCreateReq.protoMessageName + ".EventTicket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_ticket_id"),
    2: .same(proto: "qty"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.eventTicketID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.qty)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eventTicketID != 0 {
      try visitor.visitSingularInt64Field(value: self.eventTicketID, fieldNumber: 1)
    }
    if self.qty != 0 {
      try visitor.visitSingularInt32Field(value: self.qty, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCreateReq.EventTicket) -> Bool {
    if self.eventTicketID != other.eventTicketID {return false}
    if self.qty != other.qty {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCreateResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "expire_time"),
    3: .standard(proto: "server_current_time"),
  ]

  fileprivate class _StorageClass {
    var _orderID: Int64 = 0
    var _expireTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _serverCurrentTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _expireTime = source._expireTime
      _serverCurrentTime = source._serverCurrentTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._orderID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._expireTime)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._serverCurrentTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 1)
      }
      if let v = _storage._expireTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._serverCurrentTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCreateResp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._orderID != other_storage._orderID {return false}
        if _storage._expireTime != other_storage._expireTime {return false}
        if _storage._serverCurrentTime != other_storage._serverCurrentTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCheckCreateStatusReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckCreateStatusReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCheckCreateStatusReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCheckCreateStatusResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckCreateStatusResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tickets"),
    2: .standard(proto: "convenience_fee"),
    3: .standard(proto: "free_convenience_fee"),
    4: .standard(proto: "price_discount"),
    5: .standard(proto: "actual_pay"),
    6: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tickets)
      case 2: try decoder.decodeSingularFloatField(value: &self.convenienceFee)
      case 3: try decoder.decodeSingularBoolField(value: &self.freeConvenienceFee)
      case 4: try decoder.decodeSingularFloatField(value: &self.priceDiscount)
      case 5: try decoder.decodeSingularFloatField(value: &self.actualPay)
      case 6: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tickets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tickets, fieldNumber: 1)
    }
    if self.convenienceFee != 0 {
      try visitor.visitSingularFloatField(value: self.convenienceFee, fieldNumber: 2)
    }
    if self.freeConvenienceFee != false {
      try visitor.visitSingularBoolField(value: self.freeConvenienceFee, fieldNumber: 3)
    }
    if self.priceDiscount != 0 {
      try visitor.visitSingularFloatField(value: self.priceDiscount, fieldNumber: 4)
    }
    if self.actualPay != 0 {
      try visitor.visitSingularFloatField(value: self.actualPay, fieldNumber: 5)
    }
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCheckCreateStatusResp) -> Bool {
    if self.tickets != other.tickets {return false}
    if self.convenienceFee != other.convenienceFee {return false}
    if self.freeConvenienceFee != other.freeConvenienceFee {return false}
    if self.priceDiscount != other.priceDiscount {return false}
    if self.actualPay != other.actualPay {return false}
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCheckCreateStatusResp.Ticket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersCheckCreateStatusResp.protoMessageName + ".Ticket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "price"),
    3: .same(proto: "quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularFloatField(value: &self.price)
      case 3: try decoder.decodeSingularInt32Field(value: &self.quantity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.price != 0 {
      try visitor.visitSingularFloatField(value: self.price, fieldNumber: 2)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCheckCreateStatusResp.Ticket) -> Bool {
    if self.title != other.title {return false}
    if self.price != other.price {return false}
    if self.quantity != other.quantity {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCheckoutURLReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckoutURLReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "request_id"),
    3: .standard(proto: "payment_type"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      case 2: try decoder.decodeSingularStringField(value: &self.requestID)
      case 3: try decoder.decodeSingularStringField(value: &self.paymentType)
      case 4: try decoder.decodeSingularStringField(value: &self.latitude)
      case 5: try decoder.decodeSingularStringField(value: &self.longitude)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 2)
    }
    if !self.paymentType.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentType, fieldNumber: 3)
    }
    if !self.latitude.isEmpty {
      try visitor.visitSingularStringField(value: self.latitude, fieldNumber: 4)
    }
    if !self.longitude.isEmpty {
      try visitor.visitSingularStringField(value: self.longitude, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCheckoutURLReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if self.requestID != other.requestID {return false}
    if self.paymentType != other.paymentType {return false}
    if self.latitude != other.latitude {return false}
    if self.longitude != other.longitude {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCheckoutURLResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckoutURLResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "checkout_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.checkoutURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkoutURL.isEmpty {
      try visitor.visitSingularStringField(value: self.checkoutURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCheckoutURLResp) -> Bool {
    if self.checkoutURL != other.checkoutURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersCancelReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersCancelReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersAdditionalInfoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalInfoReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchasers"),
    2: .standard(proto: "order_id"),
    3: .standard(proto: "contact_name"),
    4: .standard(proto: "contact_email"),
    5: .standard(proto: "contact_phone"),
  ]

  fileprivate class _StorageClass {
    var _purchasers: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _orderID: Int64 = 0
    var _contactName: String = String()
    var _contactEmail: String = String()
    var _contactPhone: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _purchasers = source._purchasers
      _orderID = source._orderID
      _contactName = source._contactName
      _contactEmail = source._contactEmail
      _contactPhone = source._contactPhone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._purchasers)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._orderID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._contactName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._contactEmail)
        case 5: try decoder.decodeSingularStringField(value: &_storage._contactPhone)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._purchasers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 2)
      }
      if !_storage._contactName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactName, fieldNumber: 3)
      }
      if !_storage._contactEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactEmail, fieldNumber: 4)
      }
      if !_storage._contactPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactPhone, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersAdditionalInfoReq) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._purchasers != other_storage._purchasers {return false}
        if _storage._orderID != other_storage._orderID {return false}
        if _storage._contactName != other_storage._contactName {return false}
        if _storage._contactEmail != other_storage._contactEmail {return false}
        if _storage._contactPhone != other_storage._contactPhone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersAdditionalInfoReq.PurchaserNoKtp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersAdditionalInfoReq.protoMessageName + ".PurchaserNoKtp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersAdditionalInfoReq.PurchaserNoKtp) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersAdditionalInfoReq.PurchaserOneKtp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersAdditionalInfoReq.protoMessageName + ".PurchaserOneKtp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "birth_date"),
    3: .same(proto: "ktp"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _birthDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _ktp: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _birthDate = source._birthDate
      _ktp = source._ktp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._birthDate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._ktp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._birthDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._ktp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ktp, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersAdditionalInfoReq.PurchaserOneKtp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._birthDate != other_storage._birthDate {return false}
        if _storage._ktp != other_storage._ktp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersAdditionalInfoReq.PurchaserOneToOneKtp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersAdditionalInfoReq.protoMessageName + ".PurchaserOneToOneKtp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchasers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.purchasers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purchasers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.purchasers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersAdditionalInfoReq.PurchaserOneToOneKtp) -> Bool {
    if self.purchasers != other.purchasers {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersAdditionalInfoReq.PurchaserOneToOneKtp.Purchaser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersAdditionalInfoReq.PurchaserOneToOneKtp.protoMessageName + ".Purchaser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_ticket_id"),
    2: .same(proto: "name"),
    3: .standard(proto: "birth_date"),
    4: .same(proto: "ktp"),
  ]

  fileprivate class _StorageClass {
    var _eventTicketID: Int64 = 0
    var _name: String = String()
    var _birthDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _ktp: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventTicketID = source._eventTicketID
      _name = source._name
      _birthDate = source._birthDate
      _ktp = source._ktp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._eventTicketID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._birthDate)
        case 4: try decoder.decodeSingularStringField(value: &_storage._ktp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventTicketID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._eventTicketID, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._birthDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._ktp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ktp, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersAdditionalInfoReq.PurchaserOneToOneKtp.Purchaser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventTicketID != other_storage._eventTicketID {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._birthDate != other_storage._birthDate {return false}
        if _storage._ktp != other_storage._ktp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersUpcomingOrderReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpcomingOrderReq"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersUpcomingOrderReq) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketStatusResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TicketStatusResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketStatusResp) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketStatusResp.Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersTicketStatusResp.protoMessageName + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "id"),
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketStatusResp.Status) -> Bool {
    if self.id != other.id {return false}
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTransactionOrderReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionOrderReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_number"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.pageNumber)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNumber, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTransactionOrderReq) -> Bool {
    if self.pageNumber != other.pageNumber {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketDetailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TicketDetailReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketDetailReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketCheckingReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TicketCheckingReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketCheckingReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TicketCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "ticket_class"),
    1: .same(proto: "id"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    7: .same(proto: "price"),
    6: .standard(proto: "code_type"),
    3: .standard(proto: "qr_code"),
  ]

  fileprivate class _StorageClass {
    var _ticketClass: String = String()
    var _id: Int64 = 0
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _price: Float = 0
    var _codeType: Int32 = 0
    var _qrCode: [OrdersTicketCode.QRCode] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticketClass = source._ticketClass
      _id = source._id
      _startTime = source._startTime
      _endTime = source._endTime
      _price = source._price
      _codeType = source._codeType
      _qrCode = source._qrCode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ticketClass)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._qrCode)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._codeType)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._price)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ticketClass.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticketClass, fieldNumber: 2)
      }
      if !_storage._qrCode.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._qrCode, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._codeType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._codeType, fieldNumber: 6)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketCode) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._ticketClass != other_storage._ticketClass {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._codeType != other_storage._codeType {return false}
        if _storage._qrCode != other_storage._qrCode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketCode.QRCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersTicketCode.protoMessageName + ".QRCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "ktp"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.ktp)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.ktp.isEmpty {
      try visitor.visitSingularStringField(value: self.ktp, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketCode.QRCode) -> Bool {
    if self.code != other.code {return false}
    if self.ktp != other.ktp {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersUpcomingOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpcomingOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "address"),
    7: .standard(proto: "cover_picture"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    9: .same(proto: "status"),
    6: .standard(proto: "ticket_details"),
    8: .standard(proto: "time_zone"),
    10: .standard(proto: "actual_payment"),
    11: .standard(proto: "code_instructions_title"),
    12: .standard(proto: "code_instructions_body"),
    13: .standard(proto: "select_ticket_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _address: String = String()
    var _coverPicture: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _status: Int32 = 0
    var _ticketDetails: [OrdersTicketCode] = []
    var _timeZone: Int32 = 0
    var _actualPayment: Float = 0
    var _codeInstructionsTitle: String = String()
    var _codeInstructionsBody: String = String()
    var _selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _address = source._address
      _coverPicture = source._coverPicture
      _startTime = source._startTime
      _endTime = source._endTime
      _status = source._status
      _ticketDetails = source._ticketDetails
      _timeZone = source._timeZone
      _actualPayment = source._actualPayment
      _codeInstructionsTitle = source._codeInstructionsTitle
      _codeInstructionsBody = source._codeInstructionsBody
      _selectTicketTime = source._selectTicketTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._address)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._ticketDetails)
        case 7: try decoder.decodeSingularStringField(value: &_storage._coverPicture)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._actualPayment)
        case 11: try decoder.decodeSingularStringField(value: &_storage._codeInstructionsTitle)
        case 12: try decoder.decodeSingularStringField(value: &_storage._codeInstructionsBody)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._selectTicketTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._ticketDetails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ticketDetails, fieldNumber: 6)
      }
      if !_storage._coverPicture.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverPicture, fieldNumber: 7)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 8)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 9)
      }
      if _storage._actualPayment != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPayment, fieldNumber: 10)
      }
      if !_storage._codeInstructionsTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeInstructionsTitle, fieldNumber: 11)
      }
      if !_storage._codeInstructionsBody.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeInstructionsBody, fieldNumber: 12)
      }
      if let v = _storage._selectTicketTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersUpcomingOrder) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._coverPicture != other_storage._coverPicture {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._ticketDetails != other_storage._ticketDetails {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._actualPayment != other_storage._actualPayment {return false}
        if _storage._codeInstructionsTitle != other_storage._codeInstructionsTitle {return false}
        if _storage._codeInstructionsBody != other_storage._codeInstructionsBody {return false}
        if _storage._selectTicketTime != other_storage._selectTicketTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersUpcomingOrderResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpcomingOrderResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "read_status"),
    1: .standard(proto: "upcoming_orders"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.upcomingOrders)
      case 2: try decoder.decodeSingularBoolField(value: &self.readStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.upcomingOrders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.upcomingOrders, fieldNumber: 1)
    }
    if self.readStatus != false {
      try visitor.visitSingularBoolField(value: self.readStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersUpcomingOrderResp) -> Bool {
    if self.readStatus != other.readStatus {return false}
    if self.upcomingOrders != other.upcomingOrders {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTransactionOrderResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionOrderResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.orders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTransactionOrderResp) -> Bool {
    if self.orders != other.orders {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTransactionOrderResp.Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersTransactionOrderResp.protoMessageName + ".Order"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "end_time"),
    5: .standard(proto: "ticket_number"),
    6: .same(proto: "address"),
    7: .same(proto: "status"),
    8: .standard(proto: "cover_picture"),
    9: .standard(proto: "time_zone"),
    10: .standard(proto: "select_ticket_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _ticketNumber: Int32 = 0
    var _address: String = String()
    var _status: Int32 = 0
    var _coverPicture: String = String()
    var _timeZone: Int32 = 0
    var _selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _startTime = source._startTime
      _endTime = source._endTime
      _ticketNumber = source._ticketNumber
      _address = source._address
      _status = source._status
      _coverPicture = source._coverPicture
      _timeZone = source._timeZone
      _selectTicketTime = source._selectTicketTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._ticketNumber)
        case 6: try decoder.decodeSingularStringField(value: &_storage._address)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 8: try decoder.decodeSingularStringField(value: &_storage._coverPicture)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._selectTicketTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._ticketNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ticketNumber, fieldNumber: 5)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 6)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 7)
      }
      if !_storage._coverPicture.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverPicture, fieldNumber: 8)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 9)
      }
      if let v = _storage._selectTicketTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTransactionOrderResp.Order) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._ticketNumber != other_storage._ticketNumber {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._coverPicture != other_storage._coverPicture {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._selectTicketTime != other_storage._selectTicketTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketDetailResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TicketDetailResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "address"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "cover_picture"),
    13: .standard(proto: "convenience_fee"),
    14: .standard(proto: "actual_convenience_fee"),
    7: .standard(proto: "ticket_details"),
    8: .standard(proto: "actual_payment"),
    9: .same(proto: "discount"),
    10: .standard(proto: "dana_voucher"),
    11: .same(proto: "status"),
    12: .standard(proto: "time_zone"),
    15: .standard(proto: "code_type"),
    16: .standard(proto: "updated_time"),
    17: .standard(proto: "code_instructions_body"),
    18: .standard(proto: "code_instructions_title"),
    19: .standard(proto: "select_ticket_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _address: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _coverPicture: String = String()
    var _convenienceFee: Float = 0
    var _actualConvenienceFee: Float = 0
    var _ticketDetails: [OrdersTicketDetailResp.TicketCodeWithPrice] = []
    var _actualPayment: Float = 0
    var _discount: Float = 0
    var _danaVoucher: Float = 0
    var _status: Int32 = 0
    var _timeZone: Int32 = 0
    var _codeType: Int32 = 0
    var _updatedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _codeInstructionsBody: String = String()
    var _codeInstructionsTitle: String = String()
    var _selectTicketTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _address = source._address
      _startTime = source._startTime
      _endTime = source._endTime
      _coverPicture = source._coverPicture
      _convenienceFee = source._convenienceFee
      _actualConvenienceFee = source._actualConvenienceFee
      _ticketDetails = source._ticketDetails
      _actualPayment = source._actualPayment
      _discount = source._discount
      _danaVoucher = source._danaVoucher
      _status = source._status
      _timeZone = source._timeZone
      _codeType = source._codeType
      _updatedTime = source._updatedTime
      _codeInstructionsBody = source._codeInstructionsBody
      _codeInstructionsTitle = source._codeInstructionsTitle
      _selectTicketTime = source._selectTicketTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._address)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 6: try decoder.decodeSingularStringField(value: &_storage._coverPicture)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._ticketDetails)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._actualPayment)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._discount)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._danaVoucher)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        case 13: try decoder.decodeSingularFloatField(value: &_storage._convenienceFee)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._actualConvenienceFee)
        case 15: try decoder.decodeSingularInt32Field(value: &_storage._codeType)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._updatedTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._codeInstructionsBody)
        case 18: try decoder.decodeSingularStringField(value: &_storage._codeInstructionsTitle)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._selectTicketTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._coverPicture.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverPicture, fieldNumber: 6)
      }
      if !_storage._ticketDetails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ticketDetails, fieldNumber: 7)
      }
      if _storage._actualPayment != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPayment, fieldNumber: 8)
      }
      if _storage._discount != 0 {
        try visitor.visitSingularFloatField(value: _storage._discount, fieldNumber: 9)
      }
      if _storage._danaVoucher != 0 {
        try visitor.visitSingularFloatField(value: _storage._danaVoucher, fieldNumber: 10)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 11)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 12)
      }
      if _storage._convenienceFee != 0 {
        try visitor.visitSingularFloatField(value: _storage._convenienceFee, fieldNumber: 13)
      }
      if _storage._actualConvenienceFee != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualConvenienceFee, fieldNumber: 14)
      }
      if _storage._codeType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._codeType, fieldNumber: 15)
      }
      if let v = _storage._updatedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if !_storage._codeInstructionsBody.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeInstructionsBody, fieldNumber: 17)
      }
      if !_storage._codeInstructionsTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeInstructionsTitle, fieldNumber: 18)
      }
      if let v = _storage._selectTicketTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketDetailResp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._coverPicture != other_storage._coverPicture {return false}
        if _storage._convenienceFee != other_storage._convenienceFee {return false}
        if _storage._actualConvenienceFee != other_storage._actualConvenienceFee {return false}
        if _storage._ticketDetails != other_storage._ticketDetails {return false}
        if _storage._actualPayment != other_storage._actualPayment {return false}
        if _storage._discount != other_storage._discount {return false}
        if _storage._danaVoucher != other_storage._danaVoucher {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._codeType != other_storage._codeType {return false}
        if _storage._updatedTime != other_storage._updatedTime {return false}
        if _storage._codeInstructionsBody != other_storage._codeInstructionsBody {return false}
        if _storage._codeInstructionsTitle != other_storage._codeInstructionsTitle {return false}
        if _storage._selectTicketTime != other_storage._selectTicketTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketDetailResp.TicketCodeWithPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersTicketDetailResp.protoMessageName + ".TicketCodeWithPrice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "ticket_class"),
    1: .same(proto: "id"),
    5: .standard(proto: "start_time"),
    6: .standard(proto: "end_time"),
    4: .same(proto: "price"),
    3: .standard(proto: "qr_code"),
  ]

  fileprivate class _StorageClass {
    var _ticketClass: String = String()
    var _id: Int64 = 0
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _price: Float = 0
    var _qrCode: [OrdersTicketDetailResp.TicketCodeWithPrice.QRCode] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticketClass = source._ticketClass
      _id = source._id
      _startTime = source._startTime
      _endTime = source._endTime
      _price = source._price
      _qrCode = source._qrCode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ticketClass)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._qrCode)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ticketClass.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticketClass, fieldNumber: 2)
      }
      if !_storage._qrCode.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._qrCode, fieldNumber: 3)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 4)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketDetailResp.TicketCodeWithPrice) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._ticketClass != other_storage._ticketClass {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._qrCode != other_storage._qrCode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersTicketDetailResp.TicketCodeWithPrice.QRCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersTicketDetailResp.TicketCodeWithPrice.protoMessageName + ".QRCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "ktp"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.ktp)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.ktp.isEmpty {
      try visitor.visitSingularStringField(value: self.ktp, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersTicketDetailResp.TicketCodeWithPrice.QRCode) -> Bool {
    if self.code != other.code {return false}
    if self.ktp != other.ktp {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersManualRefundReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ManualRefundReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersManualRefundReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersManualCancelReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ManualCancelReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersManualCancelReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersQueryTransactionReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryTransactionReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "page_number"),
    3: .standard(proto: "page_count"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _pageNumber: Int32 = 0
    var _pageCount: Int32 = 0
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _pageNumber = source._pageNumber
      _pageCount = source._pageCount
      _startTime = source._startTime
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._pageNumber)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._pageCount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._pageNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageNumber, fieldNumber: 2)
      }
      if _storage._pageCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageCount, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersQueryTransactionReq) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        if _storage._pageNumber != other_storage._pageNumber {return false}
        if _storage._pageCount != other_storage._pageCount {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersQueryTransactionResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryTransactionResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "details"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.details)
      case 2: try decoder.decodeSingularInt64Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersQueryTransactionResp) -> Bool {
    if self.details != other.details {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersQueryTransactionResp.Detail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = OrdersQueryTransactionResp.protoMessageName + ".Detail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .same(proto: "status"),
    3: .standard(proto: "create_at"),
  ]

  fileprivate class _StorageClass {
    var _orderID: Int64 = 0
    var _status: Int32 = 0
    var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _status = source._status
      _createAt = source._createAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._orderID)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createAt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 1)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 2)
      }
      if let v = _storage._createAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersQueryTransactionResp.Detail) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._orderID != other_storage._orderID {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._createAt != other_storage._createAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersChangeOrderEmailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChangeOrderEmailReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersChangeOrderEmailReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if self.email != other.email {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OrdersResendOrderEmailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResendOrderEmailReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: OrdersResendOrderEmailReq) -> Bool {
    if self.orderID != other.orderID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
