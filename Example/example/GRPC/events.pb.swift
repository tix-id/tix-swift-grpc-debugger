// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct EventsQueryEventTicketDetailsInternalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventTicketDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var ticketClass: String {
    get {return _storage._ticketClass}
    set {_uniqueStorage()._ticketClass = newValue}
  }

  var price: Float {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventTicketDetailsInternalResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var eventTicketDetails: [EventsQueryEventTicketDetail] {
    get {return _storage._eventTicketDetails}
    set {_uniqueStorage()._eventTicketDetails = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventDetailsInternalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventDetailReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventTicketReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var headImage: [String] {
    get {return _storage._headImage}
    set {_uniqueStorage()._headImage = newValue}
  }

  var price: Float {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var actualPrice: Float {
    get {return _storage._actualPrice}
    set {_uniqueStorage()._actualPrice = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var startEnd: String {
    get {return _storage._startEnd}
    set {_uniqueStorage()._startEnd = newValue}
  }

  var rangeDate: String {
    get {return _storage._rangeDate}
    set {_uniqueStorage()._rangeDate = newValue}
  }

  var codeType: Int32 {
    get {return _storage._codeType}
    set {_uniqueStorage()._codeType = newValue}
  }

  var tag: [String] {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  var posterImage: String {
    get {return _storage._posterImage}
    set {_uniqueStorage()._posterImage = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventDetailsInternalResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventDetails: [EventsQueryEventDetailsInternalResp.EventDetailInternal] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EventDetailInternal {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var title: String {
      get {return _storage._title}
      set {_uniqueStorage()._title = newValue}
    }

    var coverPicture: String {
      get {return _storage._coverPicture}
      set {_uniqueStorage()._coverPicture = newValue}
    }

    var price: Float {
      get {return _storage._price}
      set {_uniqueStorage()._price = newValue}
    }

    var actualPrice: Float {
      get {return _storage._actualPrice}
      set {_uniqueStorage()._actualPrice = newValue}
    }

    var address: String {
      get {return _storage._address}
      set {_uniqueStorage()._address = newValue}
    }

    var status: Int32 {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    var startEnd: String {
      get {return _storage._startEnd}
      set {_uniqueStorage()._startEnd = newValue}
    }

    var rangeDate: String {
      get {return _storage._rangeDate}
      set {_uniqueStorage()._rangeDate = newValue}
    }

    var codeType: Int32 {
      get {return _storage._codeType}
      set {_uniqueStorage()._codeType = newValue}
    }

    var timeZone: Int32 {
      get {return _storage._timeZone}
      set {_uniqueStorage()._timeZone = newValue}
    }

    var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._startTime = newValue}
    }
    /// Returns true if `startTime` has been explicitly set.
    var hasStartTime: Bool {return _storage._startTime != nil}
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    mutating func clearStartTime() {_storage._startTime = nil}

    var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._endTime = newValue}
    }
    /// Returns true if `endTime` has been explicitly set.
    var hasEndTime: Bool {return _storage._endTime != nil}
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    mutating func clearEndTime() {_storage._endTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct EventsQueryScheduleDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var ticketClass: String {
    get {return _storage._ticketClass}
    set {_uniqueStorage()._ticketClass = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var refundPolicy: Bool {
    get {return _storage._refundPolicy}
    set {_uniqueStorage()._refundPolicy = newValue}
  }

  var price: Float {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var actualPrice: Float {
    get {return _storage._actualPrice}
    set {_uniqueStorage()._actualPrice = newValue}
  }

  var residualCount: Float {
    get {return _storage._residualCount}
    set {_uniqueStorage()._residualCount = newValue}
  }

  var additionalService: String {
    get {return _storage._additionalService}
    set {_uniqueStorage()._additionalService = newValue}
  }

  var stockSetting: Bool {
    get {return _storage._stockSetting}
    set {_uniqueStorage()._stockSetting = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQuerySchedule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var showDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._showDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._showDate = newValue}
  }
  /// Returns true if `showDate` has been explicitly set.
  var hasShowDate: Bool {return _storage._showDate != nil}
  /// Clears the value of `showDate`. Subsequent reads from it will return its default value.
  mutating func clearShowDate() {_storage._showDate = nil}

  var schedules: [EventsQueryScheduleDetail] {
    get {return _storage._schedules}
    set {_uniqueStorage()._schedules = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventListReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var pageNumber: Int32 {
    get {return _storage._pageNumber}
    set {_uniqueStorage()._pageNumber = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventListResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [EventsQueryEventDetail] = []

  var displayStatus: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventDetailResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var posterImage: String {
    get {return _storage._posterImage}
    set {_uniqueStorage()._posterImage = newValue}
  }

  var headImage: [String] {
    get {return _storage._headImage}
    set {_uniqueStorage()._headImage = newValue}
  }

  var price: Float {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var actualPrice: Float {
    get {return _storage._actualPrice}
    set {_uniqueStorage()._actualPrice = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var rangeDate: String {
    get {return _storage._rangeDate}
    set {_uniqueStorage()._rangeDate = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_storage._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_storage._endTime = nil}

  var tag: [String] {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  var information: String {
    get {return _storage._information}
    set {_uniqueStorage()._information = newValue}
  }

  var termsConditions: String {
    get {return _storage._termsConditions}
    set {_uniqueStorage()._termsConditions = newValue}
  }

  var addressCityName: String {
    get {return _storage._addressCityName}
    set {_uniqueStorage()._addressCityName = newValue}
  }

  var street: String {
    get {return _storage._street}
    set {_uniqueStorage()._street = newValue}
  }

  var remindStatus: Bool {
    get {return _storage._remindStatus}
    set {_uniqueStorage()._remindStatus = newValue}
  }

  var userWatch: Bool {
    get {return _storage._userWatch}
    set {_uniqueStorage()._userWatch = newValue}
  }

  var startEnd: String {
    get {return _storage._startEnd}
    set {_uniqueStorage()._startEnd = newValue}
  }

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var timeZone: Int32 {
    get {return _storage._timeZone}
    set {_uniqueStorage()._timeZone = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsQueryEventTicketResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var stagePresentation: [String] = []

  var title: String = String()

  var ktpRule: Int32 = 0

  var ticketLimit: Int32 = 0

  var schedules: [EventsQuerySchedule] = []

  var timeZone: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryTicketDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticketCode: [String] = []

  var ticketPrice: Float = 0

  var discount: Float = 0

  var convenienceFee: Float = 0

  var ticketClass: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventTicketsInternalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticketID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventsQueryEventTicketsInternalResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tickets: [EventsQueryEventTicketsInternalResp.Ticket] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Ticket {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int64 = 0

    var price: Float = 0

    var stockSetting: Bool = false

    var stockQty: Int32 = 0

    var discountRate: Float = 0

    var title: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct EventsQueryEventInternalResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var saleDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._saleDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._saleDate = newValue}
  }
  /// Returns true if `saleDate` has been explicitly set.
  var hasSaleDate: Bool {return _storage._saleDate != nil}
  /// Clears the value of `saleDate`. Subsequent reads from it will return its default value.
  mutating func clearSaleDate() {_storage._saleDate = nil}

  var endDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  var hasEndDate: Bool {return _storage._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  mutating func clearEndDate() {_storage._endDate = nil}

  var ktpRequired: EventsQueryEventInternalResp.KtpRule {
    get {return _storage._ktpRequired}
    set {_uniqueStorage()._ktpRequired = newValue}
  }

  var discountRate: Float {
    get {return _storage._discountRate}
    set {_uniqueStorage()._discountRate = newValue}
  }

  var convenienceFeeFree: Bool {
    get {return _storage._convenienceFeeFree}
    set {_uniqueStorage()._convenienceFeeFree = newValue}
  }

  var convenienceFeeRate: Float {
    get {return _storage._convenienceFeeRate}
    set {_uniqueStorage()._convenienceFeeRate = newValue}
  }

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var eventTitle: String {
    get {return _storage._eventTitle}
    set {_uniqueStorage()._eventTitle = newValue}
  }

  var maxQtyLimit: Int32 {
    get {return _storage._maxQtyLimit}
    set {_uniqueStorage()._maxQtyLimit = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum KtpRule: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case noKtp // = 0
    case oneKtp // = 1
    case oneToOneKtp // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .noKtp
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noKtp
      case 1: self = .oneKtp
      case 2: self = .oneToOneKtp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .noKtp: return 0
      case .oneKtp: return 1
      case .oneToOneKtp: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct EventsReleaseSeatInternalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seats: [EventsReleaseSeatInternalReq.Seat] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Seat {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventTicketID: Int64 = 0

    var qty: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct EventsLockSeatInternalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seats: [EventsLockSeatInternalReq.Seat] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Seat {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventTicketID: Int64 = 0

    var qty: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct EventsLockSeatInternalResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: EventsLockSeatInternalResp.Status = .locked

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case locked // = 0
    case soldOut // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .locked
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .locked
      case 1: self = .soldOut
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .locked: return 0
      case .soldOut: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tix.service"

extension EventsQueryEventTicketDetailsInternalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketDetailsInternalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitPackedInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketDetailsInternalReq) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ticket_class"),
    3: .same(proto: "price"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _ticketClass: String = String()
    var _price: Float = 0
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ticketClass = source._ticketClass
      _price = source._price
      _startTime = source._startTime
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ticketClass)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ticketClass.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticketClass, fieldNumber: 2)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketDetail) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._ticketClass != other_storage._ticketClass {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketDetailsInternalResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketDetailsInternalResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
    1: .standard(proto: "event_ticket_details"),
  ]

  fileprivate class _StorageClass {
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eventTicketDetails: [EventsQueryEventTicketDetail] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startTime = source._startTime
      _endTime = source._endTime
      _eventTicketDetails = source._eventTicketDetails
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._eventTicketDetails)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._eventTicketDetails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._eventTicketDetails, fieldNumber: 1)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketDetailsInternalResp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._eventTicketDetails != other_storage._eventTicketDetails {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetailsInternalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventDetailsInternalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitPackedInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetailsInternalReq) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventDetailReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetailReq) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketReq) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "head_image"),
    5: .same(proto: "price"),
    6: .standard(proto: "actual_price"),
    10: .same(proto: "address"),
    11: .same(proto: "status"),
    14: .standard(proto: "start_end"),
    15: .standard(proto: "range_date"),
    16: .standard(proto: "code_type"),
    17: .same(proto: "tag"),
    18: .standard(proto: "poster_image"),
    12: .standard(proto: "start_time"),
    13: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _headImage: [String] = []
    var _price: Float = 0
    var _actualPrice: Float = 0
    var _address: String = String()
    var _status: Int32 = 0
    var _startEnd: String = String()
    var _rangeDate: String = String()
    var _codeType: Int32 = 0
    var _tag: [String] = []
    var _posterImage: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _headImage = source._headImage
      _price = source._price
      _actualPrice = source._actualPrice
      _address = source._address
      _status = source._status
      _startEnd = source._startEnd
      _rangeDate = source._rangeDate
      _codeType = source._codeType
      _tag = source._tag
      _posterImage = source._posterImage
      _startTime = source._startTime
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._headImage)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._actualPrice)
        case 10: try decoder.decodeSingularStringField(value: &_storage._address)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._startEnd)
        case 15: try decoder.decodeSingularStringField(value: &_storage._rangeDate)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._codeType)
        case 17: try decoder.decodeRepeatedStringField(value: &_storage._tag)
        case 18: try decoder.decodeSingularStringField(value: &_storage._posterImage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._headImage.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._headImage, fieldNumber: 3)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 5)
      }
      if _storage._actualPrice != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPrice, fieldNumber: 6)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 10)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 11)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._startEnd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startEnd, fieldNumber: 14)
      }
      if !_storage._rangeDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rangeDate, fieldNumber: 15)
      }
      if _storage._codeType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._codeType, fieldNumber: 16)
      }
      if !_storage._tag.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tag, fieldNumber: 17)
      }
      if !_storage._posterImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._posterImage, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetail) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._headImage != other_storage._headImage {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._actualPrice != other_storage._actualPrice {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._startEnd != other_storage._startEnd {return false}
        if _storage._rangeDate != other_storage._rangeDate {return false}
        if _storage._codeType != other_storage._codeType {return false}
        if _storage._tag != other_storage._tag {return false}
        if _storage._posterImage != other_storage._posterImage {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetailsInternalResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventDetailsInternalResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.eventDetails)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventDetails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventDetails, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetailsInternalResp) -> Bool {
    if self.eventDetails != other.eventDetails {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetailsInternalResp.EventDetailInternal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EventsQueryEventDetailsInternalResp.protoMessageName + ".EventDetailInternal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "cover_picture"),
    5: .same(proto: "price"),
    6: .standard(proto: "actual_price"),
    10: .same(proto: "address"),
    11: .same(proto: "status"),
    14: .standard(proto: "start_end"),
    15: .standard(proto: "range_date"),
    16: .standard(proto: "code_type"),
    17: .standard(proto: "time_zone"),
    12: .standard(proto: "start_time"),
    13: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _coverPicture: String = String()
    var _price: Float = 0
    var _actualPrice: Float = 0
    var _address: String = String()
    var _status: Int32 = 0
    var _startEnd: String = String()
    var _rangeDate: String = String()
    var _codeType: Int32 = 0
    var _timeZone: Int32 = 0
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _coverPicture = source._coverPicture
      _price = source._price
      _actualPrice = source._actualPrice
      _address = source._address
      _status = source._status
      _startEnd = source._startEnd
      _rangeDate = source._rangeDate
      _codeType = source._codeType
      _timeZone = source._timeZone
      _startTime = source._startTime
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._coverPicture)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._actualPrice)
        case 10: try decoder.decodeSingularStringField(value: &_storage._address)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._startEnd)
        case 15: try decoder.decodeSingularStringField(value: &_storage._rangeDate)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._codeType)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._coverPicture.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverPicture, fieldNumber: 3)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 5)
      }
      if _storage._actualPrice != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPrice, fieldNumber: 6)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 10)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 11)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._startEnd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startEnd, fieldNumber: 14)
      }
      if !_storage._rangeDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rangeDate, fieldNumber: 15)
      }
      if _storage._codeType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._codeType, fieldNumber: 16)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetailsInternalResp.EventDetailInternal) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._coverPicture != other_storage._coverPicture {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._actualPrice != other_storage._actualPrice {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._startEnd != other_storage._startEnd {return false}
        if _storage._rangeDate != other_storage._rangeDate {return false}
        if _storage._codeType != other_storage._codeType {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryScheduleDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryScheduleDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ticket_class"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "end_time"),
    5: .standard(proto: "refund_policy"),
    6: .same(proto: "price"),
    7: .standard(proto: "actual_price"),
    8: .standard(proto: "residual_count"),
    9: .standard(proto: "additional_service"),
    10: .standard(proto: "stock_setting"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _ticketClass: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _refundPolicy: Bool = false
    var _price: Float = 0
    var _actualPrice: Float = 0
    var _residualCount: Float = 0
    var _additionalService: String = String()
    var _stockSetting: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ticketClass = source._ticketClass
      _startTime = source._startTime
      _endTime = source._endTime
      _refundPolicy = source._refundPolicy
      _price = source._price
      _actualPrice = source._actualPrice
      _residualCount = source._residualCount
      _additionalService = source._additionalService
      _stockSetting = source._stockSetting
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ticketClass)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._refundPolicy)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._actualPrice)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._residualCount)
        case 9: try decoder.decodeSingularStringField(value: &_storage._additionalService)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._stockSetting)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ticketClass.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ticketClass, fieldNumber: 2)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._refundPolicy != false {
        try visitor.visitSingularBoolField(value: _storage._refundPolicy, fieldNumber: 5)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 6)
      }
      if _storage._actualPrice != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPrice, fieldNumber: 7)
      }
      if _storage._residualCount != 0 {
        try visitor.visitSingularFloatField(value: _storage._residualCount, fieldNumber: 8)
      }
      if !_storage._additionalService.isEmpty {
        try visitor.visitSingularStringField(value: _storage._additionalService, fieldNumber: 9)
      }
      if _storage._stockSetting != false {
        try visitor.visitSingularBoolField(value: _storage._stockSetting, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryScheduleDetail) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._ticketClass != other_storage._ticketClass {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._refundPolicy != other_storage._refundPolicy {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._actualPrice != other_storage._actualPrice {return false}
        if _storage._residualCount != other_storage._residualCount {return false}
        if _storage._additionalService != other_storage._additionalService {return false}
        if _storage._stockSetting != other_storage._stockSetting {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQuerySchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QuerySchedule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "show_date"),
    2: .same(proto: "schedules"),
  ]

  fileprivate class _StorageClass {
    var _showDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _schedules: [EventsQueryScheduleDetail] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _showDate = source._showDate
      _schedules = source._schedules
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._showDate)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._schedules)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._showDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._schedules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._schedules, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQuerySchedule) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._showDate != other_storage._showDate {return false}
        if _storage._schedules != other_storage._schedules {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventListReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
    3: .standard(proto: "page_number"),
  ]

  fileprivate class _StorageClass {
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _pageNumber: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startTime = source._startTime
      _endTime = source._endTime
      _pageNumber = source._pageNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._pageNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._pageNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageNumber, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventListReq) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._pageNumber != other_storage._pageNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventListResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventListResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "display_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 2: try decoder.decodeSingularBoolField(value: &self.displayStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    if self.displayStatus != false {
      try visitor.visitSingularBoolField(value: self.displayStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventListResp) -> Bool {
    if self.data != other.data {return false}
    if self.displayStatus != other.displayStatus {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventDetailResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventDetailResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "poster_image"),
    4: .standard(proto: "head_image"),
    5: .same(proto: "price"),
    6: .standard(proto: "actual_price"),
    10: .same(proto: "address"),
    11: .same(proto: "status"),
    24: .standard(proto: "range_date"),
    12: .standard(proto: "start_time"),
    13: .standard(proto: "end_time"),
    14: .same(proto: "tag"),
    15: .same(proto: "information"),
    16: .standard(proto: "terms_conditions"),
    17: .standard(proto: "address_city_name"),
    22: .same(proto: "street"),
    18: .standard(proto: "remind_status"),
    19: .standard(proto: "user_watch"),
    20: .standard(proto: "start_end"),
    26: .same(proto: "latitude"),
    25: .same(proto: "longitude"),
    27: .standard(proto: "time_zone"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _title: String = String()
    var _posterImage: String = String()
    var _headImage: [String] = []
    var _price: Float = 0
    var _actualPrice: Float = 0
    var _address: String = String()
    var _status: Int32 = 0
    var _rangeDate: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _tag: [String] = []
    var _information: String = String()
    var _termsConditions: String = String()
    var _addressCityName: String = String()
    var _street: String = String()
    var _remindStatus: Bool = false
    var _userWatch: Bool = false
    var _startEnd: String = String()
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _timeZone: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _posterImage = source._posterImage
      _headImage = source._headImage
      _price = source._price
      _actualPrice = source._actualPrice
      _address = source._address
      _status = source._status
      _rangeDate = source._rangeDate
      _startTime = source._startTime
      _endTime = source._endTime
      _tag = source._tag
      _information = source._information
      _termsConditions = source._termsConditions
      _addressCityName = source._addressCityName
      _street = source._street
      _remindStatus = source._remindStatus
      _userWatch = source._userWatch
      _startEnd = source._startEnd
      _latitude = source._latitude
      _longitude = source._longitude
      _timeZone = source._timeZone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._posterImage)
        case 4: try decoder.decodeRepeatedStringField(value: &_storage._headImage)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._price)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._actualPrice)
        case 10: try decoder.decodeSingularStringField(value: &_storage._address)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._endTime)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._tag)
        case 15: try decoder.decodeSingularStringField(value: &_storage._information)
        case 16: try decoder.decodeSingularStringField(value: &_storage._termsConditions)
        case 17: try decoder.decodeSingularStringField(value: &_storage._addressCityName)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._remindStatus)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._userWatch)
        case 20: try decoder.decodeSingularStringField(value: &_storage._startEnd)
        case 22: try decoder.decodeSingularStringField(value: &_storage._street)
        case 24: try decoder.decodeSingularStringField(value: &_storage._rangeDate)
        case 25: try decoder.decodeSingularDoubleField(value: &_storage._longitude)
        case 26: try decoder.decodeSingularDoubleField(value: &_storage._latitude)
        case 27: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._posterImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._posterImage, fieldNumber: 3)
      }
      if !_storage._headImage.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._headImage, fieldNumber: 4)
      }
      if _storage._price != 0 {
        try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 5)
      }
      if _storage._actualPrice != 0 {
        try visitor.visitSingularFloatField(value: _storage._actualPrice, fieldNumber: 6)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 10)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 11)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._tag.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tag, fieldNumber: 14)
      }
      if !_storage._information.isEmpty {
        try visitor.visitSingularStringField(value: _storage._information, fieldNumber: 15)
      }
      if !_storage._termsConditions.isEmpty {
        try visitor.visitSingularStringField(value: _storage._termsConditions, fieldNumber: 16)
      }
      if !_storage._addressCityName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._addressCityName, fieldNumber: 17)
      }
      if _storage._remindStatus != false {
        try visitor.visitSingularBoolField(value: _storage._remindStatus, fieldNumber: 18)
      }
      if _storage._userWatch != false {
        try visitor.visitSingularBoolField(value: _storage._userWatch, fieldNumber: 19)
      }
      if !_storage._startEnd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startEnd, fieldNumber: 20)
      }
      if !_storage._street.isEmpty {
        try visitor.visitSingularStringField(value: _storage._street, fieldNumber: 22)
      }
      if !_storage._rangeDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rangeDate, fieldNumber: 24)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 25)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 26)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventDetailResp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._posterImage != other_storage._posterImage {return false}
        if _storage._headImage != other_storage._headImage {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._actualPrice != other_storage._actualPrice {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._rangeDate != other_storage._rangeDate {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._endTime != other_storage._endTime {return false}
        if _storage._tag != other_storage._tag {return false}
        if _storage._information != other_storage._information {return false}
        if _storage._termsConditions != other_storage._termsConditions {return false}
        if _storage._addressCityName != other_storage._addressCityName {return false}
        if _storage._street != other_storage._street {return false}
        if _storage._remindStatus != other_storage._remindStatus {return false}
        if _storage._userWatch != other_storage._userWatch {return false}
        if _storage._startEnd != other_storage._startEnd {return false}
        if _storage._latitude != other_storage._latitude {return false}
        if _storage._longitude != other_storage._longitude {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "stage_presentation"),
    3: .same(proto: "title"),
    5: .standard(proto: "ktp_rule"),
    6: .standard(proto: "ticket_limit"),
    4: .same(proto: "schedules"),
    7: .standard(proto: "time_zone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedStringField(value: &self.stagePresentation)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.schedules)
      case 5: try decoder.decodeSingularInt32Field(value: &self.ktpRule)
      case 6: try decoder.decodeSingularInt32Field(value: &self.ticketLimit)
      case 7: try decoder.decodeSingularInt32Field(value: &self.timeZone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.stagePresentation.isEmpty {
      try visitor.visitRepeatedStringField(value: self.stagePresentation, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.schedules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.schedules, fieldNumber: 4)
    }
    if self.ktpRule != 0 {
      try visitor.visitSingularInt32Field(value: self.ktpRule, fieldNumber: 5)
    }
    if self.ticketLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.ticketLimit, fieldNumber: 6)
    }
    if self.timeZone != 0 {
      try visitor.visitSingularInt32Field(value: self.timeZone, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketResp) -> Bool {
    if self.id != other.id {return false}
    if self.stagePresentation != other.stagePresentation {return false}
    if self.title != other.title {return false}
    if self.ktpRule != other.ktpRule {return false}
    if self.ticketLimit != other.ticketLimit {return false}
    if self.schedules != other.schedules {return false}
    if self.timeZone != other.timeZone {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryTicketDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryTicketDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ticket_code"),
    2: .standard(proto: "ticket_price"),
    3: .same(proto: "discount"),
    4: .standard(proto: "convenience_fee"),
    5: .standard(proto: "ticket_class"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.ticketCode)
      case 2: try decoder.decodeSingularFloatField(value: &self.ticketPrice)
      case 3: try decoder.decodeSingularFloatField(value: &self.discount)
      case 4: try decoder.decodeSingularFloatField(value: &self.convenienceFee)
      case 5: try decoder.decodeSingularStringField(value: &self.ticketClass)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ticketCode.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ticketCode, fieldNumber: 1)
    }
    if self.ticketPrice != 0 {
      try visitor.visitSingularFloatField(value: self.ticketPrice, fieldNumber: 2)
    }
    if self.discount != 0 {
      try visitor.visitSingularFloatField(value: self.discount, fieldNumber: 3)
    }
    if self.convenienceFee != 0 {
      try visitor.visitSingularFloatField(value: self.convenienceFee, fieldNumber: 4)
    }
    if !self.ticketClass.isEmpty {
      try visitor.visitSingularStringField(value: self.ticketClass, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryTicketDetail) -> Bool {
    if self.ticketCode != other.ticketCode {return false}
    if self.ticketPrice != other.ticketPrice {return false}
    if self.discount != other.discount {return false}
    if self.convenienceFee != other.convenienceFee {return false}
    if self.ticketClass != other.ticketClass {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketsInternalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketsInternalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ticket_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.ticketID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ticketID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ticketID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketsInternalReq) -> Bool {
    if self.ticketID != other.ticketID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketsInternalResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventTicketsInternalResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tickets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tickets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tickets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tickets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketsInternalResp) -> Bool {
    if self.tickets != other.tickets {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventTicketsInternalResp.Ticket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EventsQueryEventTicketsInternalResp.protoMessageName + ".Ticket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .standard(proto: "stock_setting"),
    4: .standard(proto: "stock_qty"),
    5: .standard(proto: "discount_rate"),
    6: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularFloatField(value: &self.price)
      case 3: try decoder.decodeSingularBoolField(value: &self.stockSetting)
      case 4: try decoder.decodeSingularInt32Field(value: &self.stockQty)
      case 5: try decoder.decodeSingularFloatField(value: &self.discountRate)
      case 6: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.price != 0 {
      try visitor.visitSingularFloatField(value: self.price, fieldNumber: 2)
    }
    if self.stockSetting != false {
      try visitor.visitSingularBoolField(value: self.stockSetting, fieldNumber: 3)
    }
    if self.stockQty != 0 {
      try visitor.visitSingularInt32Field(value: self.stockQty, fieldNumber: 4)
    }
    if self.discountRate != 0 {
      try visitor.visitSingularFloatField(value: self.discountRate, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventTicketsInternalResp.Ticket) -> Bool {
    if self.id != other.id {return false}
    if self.price != other.price {return false}
    if self.stockSetting != other.stockSetting {return false}
    if self.stockQty != other.stockQty {return false}
    if self.discountRate != other.discountRate {return false}
    if self.title != other.title {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventInternalResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEventInternalResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sale_date"),
    2: .standard(proto: "end_date"),
    3: .standard(proto: "ktp_required"),
    4: .standard(proto: "discount_rate"),
    5: .standard(proto: "convenience_fee_free"),
    6: .standard(proto: "convenience_fee_rate"),
    7: .standard(proto: "is_active"),
    8: .standard(proto: "event_title"),
    9: .standard(proto: "max_qty_limit"),
  ]

  fileprivate class _StorageClass {
    var _saleDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _ktpRequired: EventsQueryEventInternalResp.KtpRule = .noKtp
    var _discountRate: Float = 0
    var _convenienceFeeFree: Bool = false
    var _convenienceFeeRate: Float = 0
    var _isActive: Bool = false
    var _eventTitle: String = String()
    var _maxQtyLimit: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _saleDate = source._saleDate
      _endDate = source._endDate
      _ktpRequired = source._ktpRequired
      _discountRate = source._discountRate
      _convenienceFeeFree = source._convenienceFeeFree
      _convenienceFeeRate = source._convenienceFeeRate
      _isActive = source._isActive
      _eventTitle = source._eventTitle
      _maxQtyLimit = source._maxQtyLimit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._saleDate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._endDate)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._ktpRequired)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._discountRate)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._convenienceFeeFree)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._convenienceFeeRate)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._isActive)
        case 8: try decoder.decodeSingularStringField(value: &_storage._eventTitle)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._maxQtyLimit)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._saleDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._endDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._ktpRequired != .noKtp {
        try visitor.visitSingularEnumField(value: _storage._ktpRequired, fieldNumber: 3)
      }
      if _storage._discountRate != 0 {
        try visitor.visitSingularFloatField(value: _storage._discountRate, fieldNumber: 4)
      }
      if _storage._convenienceFeeFree != false {
        try visitor.visitSingularBoolField(value: _storage._convenienceFeeFree, fieldNumber: 5)
      }
      if _storage._convenienceFeeRate != 0 {
        try visitor.visitSingularFloatField(value: _storage._convenienceFeeRate, fieldNumber: 6)
      }
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 7)
      }
      if !_storage._eventTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventTitle, fieldNumber: 8)
      }
      if _storage._maxQtyLimit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxQtyLimit, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsQueryEventInternalResp) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._saleDate != other_storage._saleDate {return false}
        if _storage._endDate != other_storage._endDate {return false}
        if _storage._ktpRequired != other_storage._ktpRequired {return false}
        if _storage._discountRate != other_storage._discountRate {return false}
        if _storage._convenienceFeeFree != other_storage._convenienceFeeFree {return false}
        if _storage._convenienceFeeRate != other_storage._convenienceFeeRate {return false}
        if _storage._isActive != other_storage._isActive {return false}
        if _storage._eventTitle != other_storage._eventTitle {return false}
        if _storage._maxQtyLimit != other_storage._maxQtyLimit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsQueryEventInternalResp.KtpRule: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_KTP"),
    1: .same(proto: "ONE_KTP"),
    2: .same(proto: "ONE_TO_ONE_KTP"),
  ]
}

extension EventsReleaseSeatInternalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReleaseSeatInternalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seats"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.seats)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsReleaseSeatInternalReq) -> Bool {
    if self.seats != other.seats {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsReleaseSeatInternalReq.Seat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EventsReleaseSeatInternalReq.protoMessageName + ".Seat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_ticket_id"),
    2: .same(proto: "qty"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.eventTicketID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.qty)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eventTicketID != 0 {
      try visitor.visitSingularInt64Field(value: self.eventTicketID, fieldNumber: 1)
    }
    if self.qty != 0 {
      try visitor.visitSingularInt32Field(value: self.qty, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsReleaseSeatInternalReq.Seat) -> Bool {
    if self.eventTicketID != other.eventTicketID {return false}
    if self.qty != other.qty {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsLockSeatInternalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LockSeatInternalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seats"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.seats)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsLockSeatInternalReq) -> Bool {
    if self.seats != other.seats {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsLockSeatInternalReq.Seat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EventsLockSeatInternalReq.protoMessageName + ".Seat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_ticket_id"),
    2: .same(proto: "qty"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.eventTicketID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.qty)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eventTicketID != 0 {
      try visitor.visitSingularInt64Field(value: self.eventTicketID, fieldNumber: 1)
    }
    if self.qty != 0 {
      try visitor.visitSingularInt32Field(value: self.qty, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsLockSeatInternalReq.Seat) -> Bool {
    if self.eventTicketID != other.eventTicketID {return false}
    if self.qty != other.qty {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsLockSeatInternalResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LockSeatInternalResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .locked {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: EventsLockSeatInternalResp) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension EventsLockSeatInternalResp.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCKED"),
    1: .same(proto: "SOLD_OUT"),
  ]
}
